/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-05-26 09:29:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class listprac_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      Board.BoardDAO bDAO = null;
      bDAO = (Board.BoardDAO) _jspx_page_context.getAttribute("bDAO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (bDAO == null){
        bDAO = new Board.BoardDAO();
        _jspx_page_context.setAttribute("bDAO", bDAO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    	
    	
    	int totalRecord = 0; //전체 레코드 수
    	int numPerPage = 5; //페이지 당 레코드수
    	int pagePerBlock = 10; //블럭당 페이지 수 
    	
    	int totalPage=0 ; //전체 페이지 수 
    	int totalBlock=0; //전체 블럭수
    	
    	int nowPage = 1; //현재 페이지
    	int nowBlock = 1; //현재블럭
    	
    	int start=0; //DB의 select 쿼리문 시작번호
    	int end=5; //시작번호로부터 가져올 게시물의 수
    	
    	if(request.getParameter("nowPage")!=null){
    		nowPage = Integer.parseInt(request.getParameter("nowPage"));
    	}
    	start = (nowPage-1)*(numPerPage);		//select문 찾을때 첫 시작점 설정
    	System.out.println(start);
    	end = numPerPage;
    	
    	totalRecord = 500;		//일단 임의로 500으로 지정
    	totalPage = (int)Math.ceil((double)totalRecord/numPerPage);	//전체페이지수
    	nowBlock = (int)Math.ceil((double)nowPage/pagePerBlock);		//전체블럭계산
    	totalBlock = (int)Math.ceil((double)totalPage/pagePerBlock);
    
      out.write("\r\n");
      out.write("<!-- 여기까지 기본적인 알아야할 값들!!!!!--------------------------------------- -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<!--script 부분 시작 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("//새로고침 하기 위한 메소드\r\n");
      out.write(" function list(){\r\n");
      out.write("\t document.lstFrm.action = \"listprac.jsp\";\r\n");
      out.write("\t document.listFrm.submit();\r\n");
      out.write(" }\r\n");
      out.write(" \r\n");
      out.write(" //페이지 선택했을때 리스트를 바꿔주기위한 메소드\r\n");
      out.write(" function paging(page){\r\n");
      out.write("\t document.readFrm.nowPage.value = page;\r\n");
      out.write("\t document.readFrm.submit();\r\n");
      out.write("\t \r\n");
      out.write(" }\r\n");
      out.write(" //한 블럭이 넘아갈떄 쓰는 메소드\r\n");
      out.write(" function block(value){\r\n");
      out.write("\t document.readFrm.nowPage.value = ");
      out.print(pagePerBlock);
      out.write("*(value-1)+1;\r\n");
      out.write("\t document.readFrm.submit();\r\n");
      out.write(" }\r\n");
      out.write(" //게시글 읽기 메소드\r\n");
      out.write(" function read(num){\r\n");
      out.write("\t document.readFrm.num.value = num;\r\n");
      out.write("\t document.readFrm.action =\"read.jsp\";\r\n");
      out.write("\t document.readFrm.submit();\r\n");
      out.write("\t \r\n");
      out.write(" }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<center>\r\n");
      out.write("\t\t<h2>리스트</h2>\r\n");
      out.write("\t</center>\r\n");
      out.write("\t<table align=\"center\" border=\"1\" width=\"800\">\r\n");
      out.write("\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t<td width=\"80\">글번호</td>\r\n");
      out.write("\t\t\t<td width=\"320\">제목</td>\r\n");
      out.write("\t\t\t<td width=\"80\">이름</td>\r\n");
      out.write("\t\t\t<td width=\"80\">조회수</td>\r\n");
      out.write("\t\t\t<td width=\"190\">날짜</td>\r\n");
      out.write("\t\t\t<td width=\"50\">파일</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");


	Connection conn = null;
	ResultSet  rs = null;	
	PreparedStatement pstmt = null;

	request.setCharacterEncoding("UTF-8");

	Class.forName("org.mariadb.jdbc.Driver");
	conn = DriverManager.getConnection("jdbc:mariadb://localhost:3306/website", "root", "1234");
	
	String sql = "select b_idx, b_useridx, b_name, b_title, b_email, b_file, b_regdate, b_hit from  board1 order by b_idx desc, b_idx limit ? , ? " ;
	

	pstmt = conn.prepareStatement(sql);
	pstmt.setInt(1, start);
	pstmt.setInt(2, end);
	rs = pstmt.executeQuery();

      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t  \t");

	while(rs.next()){
			String b_idx 		= rs.getString("b_idx");
			String b_useridx 	= rs.getString("b_useridx");
			String b_name 		= rs.getString("b_name");
			String b_title 		= rs.getString("b_title");
			String b_email 		= rs.getString("b_email");
			String b_regdate	= rs.getString("b_regdate").substring(0, 10);
			//String b_file 	= rs.getString("b_file");
			String b_hit 		= rs.getString("b_hit");
			
			String c_cnt = "";
			String sql2 = "select count(c_idx) as c_cnt from comment1 where c_boardidx=?";
			pstmt = conn.prepareStatement(sql2);
			pstmt.setString(1, b_idx);
			ResultSet rs2 = pstmt.executeQuery();
			if(rs2.next())
			{
				if(!rs2.getString("c_cnt").equals("0")) {
					c_cnt = "["+rs2.getString("c_cnt")+"]";
				}
			}
	
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>");
      out.print(b_idx);
      out.write("</td>\r\n");
      out.write("\t\t\t<td><a href=\"board_view.jsp?b_idx=");
      out.print(b_idx);
      out.write('"');
      out.write('>');
      out.print(b_title);
      out.write(" </a>");
      out.print(c_cnt);
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(b_name);
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(b_hit);
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(b_regdate);
      out.write("</td>\r\n");
      out.write("\t\t\t<td></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

		}
	
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");
 
		int pageStart = (nowBlock -1)*pagePerBlock + 1 ; //하단 페이지 시작번호
	  	int pageEnd = ((pageStart + pagePerBlock ) <= totalPage) ?  (pageStart + pagePerBlock): totalPage+1; 
	  	//하단 페이지 끝번호
	  if(totalPage !=0){
		if (nowBlock > 1) {
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<a href=\"javascript:block('");
      out.print(nowBlock-1);
      out.write("')\">prev...</a>\r\n");
      out.write("\r\n");
      out.write("\t");
}
      out.write("&nbsp;\r\n");
      out.write("\r\n");
      out.write("\t");
for ( ; pageStart < pageEnd; pageStart++){
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<a href=\"javascript:paging('");
      out.print(pageStart );
      out.write("')\"> \r\n");
      out.write("\t\t [");
      out.print(pageStart );
      out.write("]\r\n");
      out.write("\t\r\n");
      out.write("\t</a>\r\n");
      out.write("\t");
}//for
      out.write("&nbsp;\r\n");
      out.write("\t");
if (totalBlock > nowBlock ) {
      out.write("\r\n");
      out.write("\t<a href=\"javascript:block('");
      out.print(nowBlock+1);
      out.write("')\">.....next</a>\r\n");
      out.write("\t");
}
      out.write("&nbsp;\r\n");
      out.write("\t");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<!-- 넘겨줄  -->\r\n");
      out.write("\t<form name=\"listFrm\" method=\"post\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"reload\" value=\"true\"> <input\r\n");
      out.write("\t\t\ttype=\"hidden\" name=\"nowPage\" value=\"1\">\r\n");
      out.write("\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<form name=\"readFrm\" method=\"get\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"num\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"nowPage\" value=\"");
      out.print(nowPage);
      out.write("\">  \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
