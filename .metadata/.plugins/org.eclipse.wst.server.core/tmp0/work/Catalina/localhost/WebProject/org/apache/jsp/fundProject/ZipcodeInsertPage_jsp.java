/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-06-02 06:35:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.fundProject;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import DAO.*;
import Bean.*;
import dbConnection.*;

public final class ZipcodeInsertPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1558675377959L));
    _jspx_dependants.put("jar:file:/C:/Users/사공정훈/Desktop/eclipse/workspace(jsp)/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/WebProject/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fmt.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/C:/Users/사공정훈/Desktop/eclipse/workspace(jsp)/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/WebProject/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("DAO");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("dbConnection");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("Bean");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      DAO.ProjectDAO ProjectDAO = null;
      ProjectDAO = (DAO.ProjectDAO) _jspx_page_context.getAttribute("ProjectDAO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (ProjectDAO == null){
        ProjectDAO = new DAO.ProjectDAO();
        _jspx_page_context.setAttribute("ProjectDAO", ProjectDAO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      Bean.ProjectBean ProjectBean = null;
      ProjectBean = (Bean.ProjectBean) _jspx_page_context.getAttribute("ProjectBean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (ProjectBean == null){
        ProjectBean = new Bean.ProjectBean();
        _jspx_page_context.setAttribute("ProjectBean", ProjectBean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      Bean.PresentBean PresentBean = null;
      synchronized (session) {
        PresentBean = (Bean.PresentBean) _jspx_page_context.getAttribute("PresentBean", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (PresentBean == null){
          PresentBean = new Bean.PresentBean();
          _jspx_page_context.setAttribute("PresentBean", PresentBean, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      Bean.UserBean UserBean = null;
      UserBean = (Bean.UserBean) _jspx_page_context.getAttribute("UserBean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (UserBean == null){
        UserBean = new Bean.UserBean();
        _jspx_page_context.setAttribute("UserBean", UserBean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      Bean.FundBean FundBean = null;
      synchronized (session) {
        FundBean = (Bean.FundBean) _jspx_page_context.getAttribute("FundBean", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (FundBean == null){
          FundBean = new Bean.FundBean();
          _jspx_page_context.setAttribute("FundBean", FundBean, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');
      Bean.PayInfoBean PayInfoBean = null;
      PayInfoBean = (Bean.PayInfoBean) _jspx_page_context.getAttribute("PayInfoBean", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (PayInfoBean == null){
        PayInfoBean = new Bean.PayInfoBean();
        _jspx_page_context.setAttribute("PayInfoBean", PayInfoBean, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

	String pj_idx = (String)session.getAttribute("pj_idx"); //프로젝트 인덱스
	String u_idxx = (String)session.getAttribute("u_idx"); //회원 인덱스
	int u_idx = Integer.parseInt(u_idxx);
	
	ProjectBean pjbean = ProjectDAO.getProject(pj_idx);
	
	//PAY_INFO_TB insert
	String card_no = request.getParameter("card_no");
	String card_pwd = request.getParameter("card_pwd");
	String owner_birth = request.getParameter("owner_birth");
	String owner_ph = request.getParameter("owner_ph");
	String month = request.getParameter("month");
	String year = request.getParameter("year");
	String dash = "-";
	String card_valid = year + dash + month;
	
	PayInfoBean.setPay_u_idx(u_idx);
	PayInfoBean.setCard_no(card_no);
	PayInfoBean.setCard_valid(card_valid);
	PayInfoBean.setOwner_birth(owner_birth);
	PayInfoBean.setCard_pwd(card_pwd);
	PayInfoBean.setOwner_ph(owner_ph);
	
	ProjectDAO.insertPayInfo(PayInfoBean);
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>");
      out.print( pjbean.getPj_title() );
      out.write("</title>\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"../css/ZipcodeInsertPage.css\">\r\n");
      out.write("    <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.12.0.min.js\" ></script>\r\n");
      out.write("    <script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        function execDaumPostcode() {\r\n");
      out.write("            new daum.Postcode({\r\n");
      out.write("                oncomplete: function (data) {\r\n");
      out.write("                    // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                    // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("                    // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                    var addr = ''; // 주소 변수\r\n");
      out.write("                    var extraAddr = ''; // 참고항목 변수\r\n");
      out.write("\r\n");
      out.write("                    //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("                    if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("                        addr = data.roadAddress;\r\n");
      out.write("                    } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("                        addr = data.jibunAddress;\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n");
      out.write("                    if (data.userSelectedType === 'R') {\r\n");
      out.write("                        // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("                        // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("                        if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\r\n");
      out.write("                            extraAddr += data.bname;\r\n");
      out.write("                        }\r\n");
      out.write("                        // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("                        if (data.buildingName !== '' && data.apartment === 'Y') {\r\n");
      out.write("                            extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                        }\r\n");
      out.write("                        // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("                        if (extraAddr !== '') {\r\n");
      out.write("                            extraAddr = ' (' + extraAddr + ')';\r\n");
      out.write("                        }\r\n");
      out.write("                        // 조합된 참고항목을 해당 필드에 넣는다.\r\n");
      out.write("                        document.getElementById(\"extraAddress\").value = extraAddr;\r\n");
      out.write("\r\n");
      out.write("                    } else {\r\n");
      out.write("                        document.getElementById(\"extraAddress\").value = '';\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                    document.getElementById('postcode').value = data.zonecode;\r\n");
      out.write("                    document.getElementById(\"address\").value = addr;\r\n");
      out.write("                    // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("                    document.getElementById(\"detailAddress\").focus();\r\n");
      out.write("                }\r\n");
      out.write("            }).open();\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"pledge-container\">\r\n");
      out.write("        <div class=\"b-header\">\r\n");
      out.write("            <div class=\"b-header-content\">\r\n");
      out.write("                <div class=\"b-header-content-item\">\r\n");
      out.write("                    <div class=\"b-header-headline\">");
      out.print(pjbean.getPj_title() );
      out.write("</div>\r\n");
      out.write("                    <ul class=\"b-list-pledge-history\">\r\n");
      out.write("                        <li class=\"b-list-item\">\r\n");
      out.write("                            <span class=\"b-list-dot\"></span>\r\n");
      out.write("                            <a class=\"b-list-link\">선택한 선물</a>\r\n");
      out.write("                            <div>");
      out.print(PresentBean.getMin_price() );
      out.write("원 선물/ ");
      out.print( FundBean.getF_price() );
      out.write("원 후원</div>\r\n");
      out.write("                        </li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"b-section-content\">\r\n");
      out.write("            <form>\r\n");
      out.write("                <label class=\"b-form-label\">배송주소</label>\r\n");
      out.write("                <span class=\"b-form-help\">우편번호</span>\r\n");
      out.write("                <input class=\"zipcode\" style=\"width:160px;height:40px;\" type=\"button\" id=\"PCButton\" onclick=\"execDaumPostcode()\" value=\"우편번호 찾기\"><br>\r\n");
      out.write("                <input class=\"b-form-input\" type=\"text\" id=\"postcode\" name=\"d_zipcode\">\r\n");
      out.write("                        \r\n");
      out.write("                <span  class=\"b-form-help\">우편번호</span>\r\n");
      out.write("                <input class=\"b-form-input\" type=\"text\" id=\"address\" placeholder=\"주소\" name=\"d_addr\">\r\n");
      out.write("                <span  class=\"b-form-help\">상세주소</span>        \r\n");
      out.write("                <input class=\"b-form-input\" type=\"text\" id=\"detailAddress\" placeholder=\"상세주소\" name=\"d_detail_addr\">\r\n");
      out.write("                <span  class=\"b-form-help\">참고항목</span>          \r\n");
      out.write("                <input class=\"b-form-input\"type=\"text\" id=\"extraAddress\" placeholder=\"참고항목\">\r\n");
      out.write("            \t<div class=\"b-form-wrap\">\r\n");
      out.write("                    <label class=\"b-form-label\"> 휴대폰 번호 </label>\r\n");
      out.write("                    <span class=\"b-form-help\">배송지 휴대폰 번호를 입력해 주세요</span>\r\n");
      out.write("                    <input class=\"b-form-input\" autocomplete=\"off\" type=\"tel\" name=\"d_ph\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div style=\"border-top: 1px solid rgb(220, 220, 220);\">\r\n");
      out.write("\t                <button class=\"loginButton\" type=\"submit\" formaction=\"SuccedFundProc.jsp\"\r\n");
      out.write("\t                        style=\"margin:20px 0;height:45px;\">\r\n");
      out.write("\t                        \t다음\r\n");
      out.write("\t                </button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
